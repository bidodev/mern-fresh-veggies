/* eslint-disable no-console */
/**
 * Module dependencies.
 */
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const http = require('http');

process.on('uncaughtException', (err) => {
  console.log('UNCAUGHT EXCEPTION! ðŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  process.exit(1);
});

dotenv.config({
  path: './config.env',
});
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || '5000';
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line no-console
      console.error(`ðŸ’¥ ${bind} requires elevated privileges`);
      process.exit(1);
    case 'EADDRINUSE':
      // eslint-disable-next-line no-console
      console.error(`ðŸ’¥ ${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`ðŸš€ Server running on ${bind}...`);
}

/**Mongoose connect and start the server */

//@TODO: Connect to MongoDB

/* In production use atlas database */
let urlMongoDB = process.env.DATABASE_ATLAS.replace(
  '<PASSWORD>',
  process.env.PASSWORD
);

mongoose
  .connect(urlMongoDB, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log(
      urlMongoDB.includes('localhost')
        ? 'ðŸš€ Connected to mongodb://localhost:27017'
        : 'ðŸš€ Connected to Atlas MongoDB'
    );
  })
  .then(() => {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((err) => console.error(err.message));

process.on('unhandledRejection', (err) => {
  console.log('UNHANDLED REJECTION! ðŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

process.on('SIGTERM', () => {
  console.log('ðŸ‘‹ SIGTERM RECEIVED. Shutting down gracefully');
  server.close(() => {
    console.log('ðŸ’¥ Process terminated!');
  });
});
